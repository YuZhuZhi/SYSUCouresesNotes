from pyqpanda import *
import matplotlib.pyplot as plt
import numpy as np
import re

QUBIT_NUM = 4
ITERATION = 30
LEARNING_RATE = 2e-5

class Hamilton:
    def __init__(self, M: int, N: int, m: int, n: int, A: float, B: float, lambda1: float, lambda2: float) -> None:
        np.random.seed(100)
        self.params: dict[str : float] = {"M" : M, "N" : N, "m" : m, "n" : n, "A" : A, "B" : B, "lambda1" : lambda1, "lambda2" : lambda2}
        self.alpha, self.beta = np.random.random((M, N)), np.random.random((M, N))
        # self.alpha = np.array([[4, 3], [2, 1]])
        # self.beta = np.array([[4, 3], [2, 1]])
    
    def classicValue(self, choose: str) -> float:
        binary = []
        for char in choose: binary.append(int(char))
        sum = 0.0
        for i in range(0, self.params["M"]):
            for j in range(0, self.params["N"]):
                for k in range(0, self.params["M"]):
                    for l in range(0, self.params["N"]):
                        coefficient = self.alpha[i][j] * self.alpha[k][l] + self.beta[i][j] * self.beta[k][l]
                        coefficient = coefficient * binary[i] * binary[j + self.params["M"]] * binary[k] * binary[l + self.params["M"]]
                        sum = sum + coefficient
        for i in range(0, self.params["M"]):
            for j in range(0, self.params["N"]):
                coefficient = self.params['A'] * self.alpha[i][j] + self.params['B'] * self.beta[i][j]
                coefficient = -2 * coefficient
                sum = sum + coefficient * binary[i] * binary[j + self.params["M"]]
        sum = sum + self.params['A'] * self.params['A'] + self.params['B'] * self.params['B']
        sum = sum
        for i in range(0, self.params["M"]):
            sum = sum - 2 * self.params['m'] * self.params['lambda1'] * binary[i]
            for j in range(0, self.params["M"]):
                sum = sum + self.params['lambda1'] * binary[i] * binary[j]
        sum = sum + self.params['lambda1'] * self.params['m'] * self.params['m']
        sum = sum
        for i in range(0, self.params["N"]):
            sum = sum - 2 * self.params['n'] * self.params['lambda2'] * binary[i + self.params["M"]]
            for j in range(0, self.params["N"]):
                sum = sum + self.params['lambda2'] * binary[i + self.params["M"]] * binary[j + self.params["M"]]
        sum = sum + self.params['lambda2'] * self.params['n'] * self.params['n']
        return sum
    
    def values(self, choose: list[str]) -> dict[str, float]:
        diction = {}
        for string in choose:
            diction[string] = self.classicValue(string)
        return diction
    
    def unitaryAddPauli(self, pauli: dict[str : float], qubits: list[int], coeff: float) -> None:
        """为单个n次二进制变量添加泡利算法"""
        qubits.sort()
        if (len(qubits) == 1): # 一次项
            temp_str = 'Z' + str(qubits[0])
            pauli[temp_str] = pauli.get(temp_str, 0) - 0.5 * coeff
            return
            
        elif (len(qubits) == 2): # 二次项
            str1 = 'Z' + str(qubits[0])
            str2 = "Z" + str(qubits[1])
            pauli[str1] = pauli.get(str1, 0) - 0.25 * coeff
            pauli[str2] = pauli.get(str2, 0) - 0.25 * coeff
            # 添加单泡利算符
            str12 = str1 + ' ' + str2
            pauli[str12] = pauli.get(str12, 0) + 0.25 * coeff
            # 添加双泡利算符
            return
        
        elif (len(qubits) == 3): # 三次项
            str1 = 'Z' + str(qubits[0])
            str2 = "Z" + str(qubits[1])
            str3 = "Z" + str(qubits[2])
            pauli[str1] = pauli.get(str1, 0) - 0.125 * coeff
            pauli[str2] = pauli.get(str2, 0) - 0.125 * coeff
            pauli[str3] = pauli.get(str3, 0) - 0.125 * coeff
            # 添加单泡利算符
            str12 = str1 + ' ' + str2
            str13 = str1 + ' ' + str3
            str23 = str2 + ' ' + str3
            pauli[str12] = pauli.get(str12, 0) + 0.125 * coeff
            pauli[str13] = pauli.get(str13, 0) + 0.125 * coeff
            pauli[str23] = pauli.get(str23, 0) + 0.125 * coeff
            # 添加双泡利算符
            str123 = str1 + ' ' + str2 + ' ' + str3
            pauli[str123] = pauli.get(str123, 0) - 0.125 * coeff
            # 添加三泡利算符
            return
        
        elif (len(qubits) == 4): # 四次项
            str1 = 'Z' + str(qubits[0])
            str2 = "Z" + str(qubits[1])
            str3 = "Z" + str(qubits[2])
            str4 = "Z" + str(qubits[3])
            pauli[str1] = pauli.get(str1, 0) - 0.0625 * coeff
            pauli[str2] = pauli.get(str2, 0) - 0.0625 * coeff
            pauli[str3] = pauli.get(str3, 0) - 0.0625 * coeff
            pauli[str4] = pauli.get(str4, 0) - 0.0625 * coeff
            # 添加单泡利算符
            str12 = str1 + ' ' + str2
            str13 = str1 + ' ' + str3
            str14 = str1 + ' ' + str4
            str23 = str2 + ' ' + str3
            str24 = str2 + ' ' + str4
            str34 = str3 + ' ' + str4
            pauli[str12] = pauli.get(str12, 0) + 0.0625 * coeff
            pauli[str13] = pauli.get(str13, 0) + 0.0625 * coeff
            pauli[str14] = pauli.get(str14, 0) + 0.0625 * coeff
            pauli[str23] = pauli.get(str23, 0) + 0.0625 * coeff
            pauli[str24] = pauli.get(str24, 0) + 0.0625 * coeff
            pauli[str34] = pauli.get(str34, 0) + 0.0625 * coeff
            # 添加双泡利算符
            str123 = str1 + ' ' + str2 + ' ' + str3
            str124 = str1 + ' ' + str2 + ' ' + str4
            str134 = str1 + ' ' + str3 + ' ' + str4
            str234 = str2 + ' ' + str3 + ' ' + str4
            pauli[str123] = pauli.get(str123, 0) - 0.0625 * coeff
            pauli[str124] = pauli.get(str124, 0) - 0.0625 * coeff
            pauli[str134] = pauli.get(str134, 0) - 0.0625 * coeff
            pauli[str234] = pauli.get(str234, 0) - 0.0625 * coeff
            # 添加三泡利算符
            str1234 = str1 + ' ' + str2 + ' ' + str3 + ' ' + str4
            pauli[str1234] = pauli.get(str1234, 0) + 0.0625 * coeff
            # 添加四泡利算符
            return
    
    def getPauli(self) -> PauliOperator:
        """由给定参数返回泡利算符"""
        # 按照标量形式展开，按次数合并。之后由unitaryAddPauli实现添加泡利算符
        pauli: dict[str : float] = {}
        for i in range(0, self.params["M"]):
            for j in range(0, self.params["N"]):
                for k in range(0, self.params["M"]):
                    for l in range(0, self.params["N"]):
                        coefficient = self.alpha[i][j] * self.alpha[k][l] + self.beta[i][j] * self.beta[k][l]
                        list1 = [ i, j + self.params['M'] ]
                        if (k != i): list1.append(k)
                        if (l != j): list1.append(l + self.params['M'])
                        # 可能会产生四次项，三次项，二次项
                        self.unitaryAddPauli(pauli, list1, coefficient)
        for i in range(0, self.params["M"]):
            for j in range(0, self.params["N"]):
                coefficient = self.params['A'] * self.alpha[i][j] + self.params['B'] * self.beta[i][j]
                coefficient = -2 * coefficient
                # 必定产生二次项
                self.unitaryAddPauli(pauli, [ i, j + self.params['M'] ], coefficient)
        for i in range(0, self.params["M"]):
            list3 = [ i ]
            # 添加一次项
            self.unitaryAddPauli(pauli, list3, -2 * self.params['m'] * self.params['lambda1'])
            for j in range(0, self.params["M"]):
                if (j != i): list3.append(j)
                # 可能产生二次项，一次项
                self.unitaryAddPauli(pauli, list3, self.params['lambda1'])
                if (len(list3) == 2): list3.pop()
        for i in range(0, self.params["N"]):
            list4 = [ i + self.params["M"] ]
            # 添加一次项
            self.unitaryAddPauli(pauli, list4, -2 * self.params['n'] * self.params['lambda2'])
            for j in range(0, self.params["N"]):
                if (j != i): list4.append(j + self.params["M"])
                # 可能产生二次项，一次项
                self.unitaryAddPauli(pauli, list4, self.params['lambda2'])
                if (len(list4) == 2): list4.pop()
        return PauliOperator(pauli, True)

def oneStepIteration(qubits: QVec, Hamiltonian, beta: var, gamma: var) -> VariationalQuantumCircuit:
    """生成可优化的单次迭代线路(无屏障)"""
    vqc = VariationalQuantumCircuit()
    for i in range(0, len(Hamiltonian)):
        item = Hamiltonian[i]
        dict_p = item[0]
        affect_qubits = []
        for iter in dict_p:
            if (dict_p[iter] != 'Z'): pass
            affect_qubits.append(qubits[iter])
            
        if (len(affect_qubits) == 1):
            vqc.insert(VariationalQuantumGate_RZ(affect_qubits[0], -2.0 * gamma * item[1]))
            
        elif (len(affect_qubits) == 2):
            vqc.insert(VariationalQuantumGate_CNOT(affect_qubits[0], affect_qubits[1]))
            vqc.insert(VariationalQuantumGate_RZ(affect_qubits[1], -2.0 * gamma * item[1]))
            vqc.insert(VariationalQuantumGate_CNOT(affect_qubits[0], affect_qubits[1]))
            
        elif (len(affect_qubits) == 3):            
            vqc.insert(VariationalQuantumGate_CNOT(affect_qubits[0], affect_qubits[2]))
            vqc.insert(VariationalQuantumGate_CNOT(affect_qubits[1], affect_qubits[2]))
            vqc.insert(VariationalQuantumGate_RZ(affect_qubits[2], -2.0 * gamma * item[1]))
            vqc.insert(VariationalQuantumGate_CNOT(affect_qubits[1], affect_qubits[2]))
            vqc.insert(VariationalQuantumGate_CNOT(affect_qubits[0], affect_qubits[2]))
        
        elif (len(affect_qubits) == 4):            
            vqc.insert(VariationalQuantumGate_CNOT(affect_qubits[0], affect_qubits[3]))
            vqc.insert(VariationalQuantumGate_CNOT(affect_qubits[1], affect_qubits[3]))
            vqc.insert(VariationalQuantumGate_CNOT(affect_qubits[2], affect_qubits[3]))
            vqc.insert(VariationalQuantumGate_RZ(affect_qubits[3], -2.0 * gamma * item[1]))
            vqc.insert(VariationalQuantumGate_CNOT(affect_qubits[2], affect_qubits[3]))
            vqc.insert(VariationalQuantumGate_CNOT(affect_qubits[1], affect_qubits[3]))
            vqc.insert(VariationalQuantumGate_CNOT(affect_qubits[0], affect_qubits[3]))
        
    for qubit in qubits:
        vqc.insert(VariationalQuantumGate_RX(qubit, 2.0 * beta))
        
    return vqc

def generateOptimizeCircuit(qubits: QVec, hamilton: Hamilton) -> QProg:
    """优化线路生成"""
    gamma, beta = var(0.28042277, True), var(1.14050767, True)
    # gamma, beta = var(0.99386493, True), var(0.90148297, True)
    pauli = hamilton.getPauli()
    
    vqc = VariationalQuantumCircuit()
    for qubit in qubits: vqc.insert(VariationalQuantumGate_H(qubit)) # 初态制备
    for i in range(1): 
        vqc.insert(oneStepIteration(qubits, pauli.toHamiltonian(True), beta, gamma))
    
    loss = qop(vqc, pauli, qvm, qubits)
    # optimizer = MomentumOptimizer.minimize(loss, 2e-8, 0.9)
    optimizer = AdamOptimizer.minimize(loss, LEARNING_RATE, 0.9, 0.999, 1e-8)
    leaves = optimizer.get_variables()
    for i in range(ITERATION):
        optimizer.run(leaves, 0)
        loss_value = optimizer.get_loss()
        print("i: ", i, " loss:", loss_value, "gamma=", gamma.get_value(), ", beta=", beta.get_value())
        print(time.strftime('%Y-%m-%d %H:%M:%S',time.localtime(time.time())))

    prog = QProg()
    qcir = vqc.feed()
    prog.insert(qcir)
    
    return prog

def oneStepIterationWithBarrier(qubits: QVec, Hamiltonian, beta: float, gamma: float) -> QCircuit:
    """生成含有屏障的单次迭代线路"""
    circuit = QCircuit()
    for i in range(0, len(Hamiltonian)):
        item = Hamiltonian[i]
        dict_p = item[0]
        affect_qubits = []
        for iter in dict_p:
            if (dict_p[iter] != 'Z'): pass
            affect_qubits.append(qubits[iter])
            
        if (len(affect_qubits) == 1):
            circuit.insert(RZ(affect_qubits[0], -2.0 * gamma * item[1]))
            
        elif (len(affect_qubits) == 2):
            circuit.insert(CNOT(affect_qubits[0], affect_qubits[1]))
            circuit.insert(RZ(affect_qubits[1], -2.0 * gamma * item[1]))
            circuit.insert(CNOT(affect_qubits[0], affect_qubits[1]))
            
        elif (len(affect_qubits) == 3):            
            circuit.insert(CNOT(affect_qubits[0], affect_qubits[2]))
            circuit.insert(CNOT(affect_qubits[1], affect_qubits[2]))
            circuit.insert(RZ(affect_qubits[2], -2.0 * gamma * item[1]))
            circuit.insert(CNOT(affect_qubits[1], affect_qubits[2]))
            circuit.insert(CNOT(affect_qubits[0], affect_qubits[2]))
        
        elif (len(affect_qubits) == 4):            
            circuit.insert(CNOT(affect_qubits[0], affect_qubits[3]))
            circuit.insert(CNOT(affect_qubits[1], affect_qubits[3]))
            circuit.insert(CNOT(affect_qubits[2], affect_qubits[3]))
            circuit.insert(RZ(affect_qubits[3], -2.0 * gamma * item[1]))
            circuit.insert(CNOT(affect_qubits[2], affect_qubits[3]))
            circuit.insert(CNOT(affect_qubits[1], affect_qubits[3]))
            circuit.insert(CNOT(affect_qubits[0], affect_qubits[3]))
        
        circuit.insert(BARRIER(affect_qubits))
        
    for qubit in qubits:
        circuit.insert(RX(qubit, 2.0 * beta))
        
    return circuit

def generateOriginCircuit(qubits: QVec, hamilton: Hamilton, beta: float, gamma: float) -> QProg:
    """原始非基本门电路生成(带屏障)"""
    pauli = hamilton.getPauli()
    
    program = QProg()
    for qubit in qubits: program.insert(H(qubit)) # 初态制备
    program.insert(oneStepIterationWithBarrier(qubits, pauli.toHamiltonian(True), beta, gamma))
    
    return program

def generateTopologicalCircuit(machine: QuantumMachine, qubits: QVec, hamilton: Hamilton) -> QProg:
    """生成符合拓扑结构的线路"""
    # program = generateOptimizeCircuit(qubits, hamilton)
    program = generateOriginCircuit(qubits, hamilton, beta = 0.28042277, gamma = 1.14050767)
    
    topological_grid = np.zeros((QUBIT_NUM, QUBIT_NUM), dtype = np.float64)
    for i in range(0, QUBIT_NUM):
        if (i + 1 < QUBIT_NUM): topological_grid[i][i + 1], topological_grid[i + 1][i] = 1, 1
        if (i + 6 < QUBIT_NUM): topological_grid[i][i + 6], topological_grid[i + 6][i] = 1, 1
    
    topological_program = sabre_mapping(program, machine, 20, 100, arch_matrix = topological_grid)
    return transform_to_base_qgate(topological_program, machine, ['U3'], ['CNOT']) # 转化为基本量子门

def generate_circuit(program: QProg, machine: QuantumMachine) -> "list[tuple]":
    returner = []
    string = transform_qprog_to_originir(program, machine)
    gates = string.split('\n')
    for gate in gates:
        gate_param = gate.split(' ')
        if (gate_param[0] == "U3"):
            param = re.split("\,\(|[\,\)]", gate_param[1])
            qubit = int(param[0][2 : -1])
            params = (float(param[1]), float(param[2]), float(param[3]))
            returner.append((gate_param[0], qubit, None, params))
        elif (gate_param[0] == "CNOT" or gate_param[0] == "BARRIER"):
            qubit = []
            param = re.split("\,", gate_param[1])
            for q in param: qubit.append(int(q[2 : -1]))
            returner.append((gate_param[0], qubit, None, None))
        # elif (gate_param[0] == "MEASURE"):
        #     param = re.split("\,", gate_param[1])
        #     returner.append((gate_param[0], param[0][2 : -1], param[1][2 : -1], None))
    
    for i in range(0, QUBIT_NUM):
        returner.append(("MEASURE", i, i, None))
    
    # print(returner)
    return returner

def question2() -> "list[tuple]":
    answer = [('U3', 7, None, (1.5707963267949, -0.228485973790772, 3.14159265358979)), ('BARRIER', [7], None, None), ('U3', 1, None, (1.5707963267949, 2.22044604925031e-16, 3.14159265358979)), ('CNOT', [7, 1], None, None), ('U3', 1, None, (0.0, -2.92334255161519, -2.92334255161519)), ('CNOT', [7, 1], None, None), ('BARRIER', [7, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('U3', 1, None, (1.5707963267949, 2.22044604925031e-16, 3.14159265358979)), ('CNOT', [7, 1], None, None), ('CNOT', [2, 1], None, None), ('U3', 1, None, (0.0, 0.431673586375198, 0.431673586375198)), ('CNOT', [2, 1], None, None), ('CNOT', [7, 1], None, None), ('BARRIER', [7, 2, 1], None, None), ('U3', 8, None, (1.5707963267949, 2.22044604925031e-16, 3.14159265358979)), ('CNOT', [7, 8], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [2, 8], None, None), ('U3', 8, None, (0.0, -0.0893664309670115, -0.0893664309670115)), ('CNOT', [2, 8], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [7, 8], None, None), ('BARRIER', [7, 2, 1, 8], None, None), ('U3', 6, None, (1.5707963267949, 2.22044604925031e-16, 3.14159265358979)), ('CNOT', [7, 6], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [1, 7], None, None), ('U3', 7, None, (0.0, -0.0984752779081194, -0.0984752779081194)), ('CNOT', [1, 7], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [6, 7], None, None), ('BARRIER', [6, 1, 2, 7], None, None), ('CNOT', [4, 3], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [4, 3], None, None), ('CNOT', [5, 4], None, None), ('CNOT', [4, 5], None, None), ('CNOT', [5, 4], None, None), ('U3', 5, None, (1.5707963267949, 2.22044604925031e-16, 3.14159265358979)), ('CNOT', [6, 5], None, None), ('CNOT', [0, 1], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [0, 1], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [0, 6], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [6, 5], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [4, 3], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [4, 3], None, None), ('CNOT', [4, 5], None, None), ('U3', 5, None, (0.0, -0.113461082861826, -0.113461082861826)), ('CNOT', [4, 5], None, None), ('CNOT', [6, 5], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [0, 6], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [6, 5], None, None), ('BARRIER', [6, 0, 4, 5], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [7, 6], None, None), ('U3', 1, None, (1.5707963267949, 2.22044604925031e-16, 3.14159265358979)), ('CNOT', [7, 1], None, None), ('CNOT', [0, 1], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [4, 3], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [2, 1], None, None), ('U3', 1, None, (0.0, -0.0478752338419593, -0.0478752338419593)), ('CNOT', [2, 1], None, None), ('CNOT', [0, 1], None, None), ('CNOT', [7, 1], None, None), ('BARRIER', [7, 0, 2, 1], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [0, 1], None, None), ('U3', 1, None, (0.0, 0.41839004357002, 0.41839004357002)), ('CNOT', [0, 1], None, None), ('CNOT', [7, 1], None, None), ('BARRIER', [7, 0, 1], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [0, 6], None, None), ('CNOT', [0, 6], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [0, 6], None, None), ('CNOT', [1, 0], None, None), ('U3', 0, None, (0.0, -0.0951826672228188, -0.0951826672228188)), ('CNOT', [1, 0], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [0, 1], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [7, 1], None, None), ('BARRIER', [7, 6, 0, 1], None, None), ('CNOT', [6, 5], None, None), ('CNOT', [5, 6], None, None), ('CNOT', [6, 5], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [5, 6], None, None), ('CNOT', [0, 6], None, None), ('U3', 6, None, (0.0, -0.155007120100794, -0.155007120100794)), ('CNOT', [0, 6], None, None), ('CNOT', [5, 6], None, None), ('CNOT', [7, 6], None, None), ('BARRIER', [7, 5, 0, 6], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [5, 6], None, None), ('CNOT', [0, 6], None, None), ('U3', 6, None, (0.0, -0.0246167261248836, -0.0246167261248836)), ('CNOT', [0, 6], None, None), ('CNOT', [5, 6], None, None), ('CNOT', [0, 6], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [0, 6], None, None), ('CNOT', [1, 0], None, None), ('BARRIER', [1, 5, 6, 0], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [4, 3], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [4, 3], None, None), ('CNOT', [5, 4], None, None), ('U3', 4, None, (0.0, 0.471496691568664, 0.471496691568664)), ('CNOT', [5, 4], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [4, 3], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [1, 2], None, None), ('BARRIER', [1, 5, 2], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [6, 5], None, None), ('CNOT', [5, 6], None, None), ('CNOT', [6, 5], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [8, 7], None, None), ('U3', 7, None, (0.0, -0.133406566533804, -0.133406566533804)), ('CNOT', [8, 7], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [1, 7], None, None), ('BARRIER', [1, 6, 8, 7], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [1, 0], None, None), ('U3', 0, None, (0.0, -0.0369019607884575, -0.0369019607884575)), ('CNOT', [1, 0], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [1, 0], None, None), ('BARRIER', [1, 6, 2, 0], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [6, 7], None, None), ('U3', 7, None, (0.0, 0.595773686191158, 0.595773686191158)), ('CNOT', [6, 7], None, None), ('CNOT', [1, 7], None, None), ('BARRIER', [1, 6, 7], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [1, 0], None, None), ('U3', 0, None, (0.0, -0.0743210945323286, -0.0743210945323286)), ('CNOT', [1, 0], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [0, 6], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [7, 6], None, None), ('BARRIER', [7, 0, 1, 6], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [0, 6], None, None), ('U3', 6, None, (0.0, 0.184647444151322, 0.184647444151322)), ('CNOT', [0, 6], None, None), ('CNOT', [7, 6], None, None), ('BARRIER', [7, 0, 6], None, None), ('U3', 0, None, (0.0, -1.52497200248523, -1.52497200248523)), ('BARRIER', [0], None, None), ('CNOT', [5, 4], None, None), ('CNOT', [4, 5], None, None), ('CNOT', [5, 4], None, None), ('CNOT', [6, 5], None, None), ('CNOT', [5, 6], None, None), ('CNOT', [6, 5], None, None), ('U3', 6, None, (1.5707963267949, 2.22044604925031e-16, 3.14159265358979)), ('CNOT', [7, 6], None, None), ('U3', 6, None, (0.0, -3.12514052305573, -3.12514052305573)), ('CNOT', [7, 6], None, None), ('BARRIER', [7, 6], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [7, 8], None, None), ('U3', 8, None, (0.0, 0.755022031047528, 0.755022031047528)), ('CNOT', [7, 8], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [7, 8], None, None), ('BARRIER', [7, 6, 8], None, None), ('CNOT', [5, 4], None, None), ('CNOT', [4, 5], None, None), ('CNOT', [5, 4], None, None), ('CNOT', [6, 5], None, None), ('CNOT', [5, 6], None, None), ('CNOT', [6, 5], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [5, 6], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [7, 6], None, None), ('U3', 6, None, (0.0, -0.104439431497431, -0.104439431497431)), ('CNOT', [7, 6], None, None), ('CNOT', [5, 6], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [8, 7], None, None), ('BARRIER', [8, 5, 6, 7], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [4, 5], None, None), ('CNOT', [5, 4], None, None), ('CNOT', [4, 5], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [4, 3], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [0, 6], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [0, 6], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [0, 1], None, None), ('U3', 1, None, (0.0, -0.103529834279257, -0.103529834279257)), ('CNOT', [0, 1], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [8, 2], None, None), ('BARRIER', [8, 3, 0, 2], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [0, 1], None, None), ('U3', 1, None, (0.0, -0.264077596187015, -0.264077596187015)), ('CNOT', [0, 1], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [7, 1], None, None), ('BARRIER', [7, 3, 0, 1], None, None), ('CNOT', [6, 5], None, None), ('CNOT', [5, 6], None, None), ('CNOT', [6, 5], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [4, 3], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [4, 3], None, None), ('CNOT', [5, 4], None, None), ('CNOT', [4, 5], None, None), ('CNOT', [5, 4], None, None), ('CNOT', [5, 6], None, None), ('CNOT', [0, 6], None, None), ('U3', 6, None, (0.0, -0.050219588262578, -0.050219588262578)), ('CNOT', [0, 6], None, None), ('CNOT', [5, 6], None, None), ('CNOT', [7, 6], None, None), ('BARRIER', [7, 5, 0, 6], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [6, 5], None, None), ('CNOT', [5, 6], None, None), ('CNOT', [6, 5], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [6, 7], None, None), ('U3', 7, None, (0.0, 0.330946720442413, 0.330946720442413)), ('CNOT', [6, 7], None, None), ('CNOT', [8, 7], None, None), ('BARRIER', [8, 6, 7], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [7, 8], None, None), ('U3', 8, None, (0.0, -0.0553646530406024, -0.0553646530406024)), ('CNOT', [7, 8], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [2, 8], None, None), ('BARRIER', [2, 7, 6, 8], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [0, 6], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [0, 6], None, None), ('CNOT', [0, 1], None, None), ('U3', 1, None, (0.0, -0.141486476617423, -0.141486476617423)), ('CNOT', [0, 1], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [2, 1], None, None), ('BARRIER', [2, 7, 0, 1], None, None), ('CNOT', [4, 5], None, None), ('CNOT', [5, 4], None, None), ('CNOT', [4, 5], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [4, 3], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [0, 1], None, None), ('U3', 1, None, (0.0, -0.0114606591342226, -0.0114606591342226)), ('CNOT', [0, 1], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [2, 1], None, None), ('BARRIER', [2, 7, 0, 1], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [7, 8], None, None), ('U3', 8, None, (0.0, 0.287679359992855, 0.287679359992855)), ('CNOT', [7, 8], None, None), ('CNOT', [2, 8], None, None), ('BARRIER', [2, 7, 8], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [9, 3], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [9, 3], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [9, 8], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [9, 8], None, None), ('U3', 8, None, (0.0, -0.0677261413339671, -0.0677261413339671)), ('CNOT', [9, 8], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [2, 8], None, None), ('BARRIER', [2, 7, 9, 8], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [9, 3], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [3, 2], None, None), ('U3', 2, None, (0.0, -0.0343121080413214, -0.0343121080413214)), ('CNOT', [3, 2], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [1, 2], None, None), ('BARRIER', [1, 8, 3, 2], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [8, 7], None, None), ('U3', 7, None, (0.0, 0.795336394409945, 0.795336394409945)), ('CNOT', [8, 7], None, None), ('CNOT', [1, 7], None, None), ('BARRIER', [1, 8, 7], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [8, 2], None, None), ('U3', 2, None, (0.0, -0.0939080842608217, -0.0939080842608217)), ('CNOT', [8, 2], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [2, 1], None, None), ('BARRIER', [2, 7, 8, 1], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [7, 1], None, None), ('U3', 1, None, (0.0, 0.192705329176801, 0.192705329176801)), ('CNOT', [7, 1], None, None), ('CNOT', [2, 1], None, None), ('BARRIER', [2, 7, 1], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [5, 6], None, None), ('U3', 6, None, (0.0, -1.66274731641299, -1.66274731641299)), ('CNOT', [5, 6], None, None), ('BARRIER', [5, 6], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [9, 3], None, None), ('CNOT', [3, 9], None, None), ('U3', 3, None, (1.5707963267949, 2.22044604925031e-16, 3.14159265358979)), ('CNOT', [2, 3], None, None), ('U3', 3, None, (0.0, 2.95141893909538, 2.95141893909538)), ('CNOT', [2, 3], None, None), ('BARRIER', [2, 3], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [2, 1], None, None), ('U3', 1, None, (0.0, 0.797633736039175, 0.797633736039175)), ('CNOT', [2, 1], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [2, 1], None, None), ('BARRIER', [2, 8, 1], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [0, 1], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [0, 1], None, None), ('U3', 1, None, (0.0, -0.135815631336906, -0.135815631336906)), ('CNOT', [0, 1], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [8, 7], None, None), ('BARRIER', [8, 2, 0, 7], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [0, 6], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [8, 9], None, None), ('U3', 9, None, (0.0, -0.130192865748618, -0.130192865748618)), ('CNOT', [8, 9], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [8, 9], None, None), ('BARRIER', [8, 3, 7, 9], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [1, 2], None, None), ('U3', 2, None, (0.0, -0.266400094235509, -0.266400094235509)), ('CNOT', [1, 2], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [8, 2], None, None), ('BARRIER', [8, 3, 1, 2], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [1, 7], None, None), ('U3', 7, None, (0.0, -0.0346688896220433, -0.0346688896220433)), ('CNOT', [1, 7], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [8, 7], None, None), ('BARRIER', [8, 1, 2, 7], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [1, 7], None, None), ('U3', 7, None, (0.0, 0.494968837260542, 0.494968837260542)), ('CNOT', [1, 7], None, None), ('CNOT', [8, 7], None, None), ('BARRIER', [8, 1, 7], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [8, 9], None, None), ('U3', 9, None, (0.0, -0.0790973056115873, -0.0790973056115873)), ('CNOT', [8, 9], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [8, 9], None, None), ('BARRIER', [8, 3, 7, 9], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [1, 2], None, None), ('U3', 2, None, (0.0, -0.201646394016898, -0.201646394016898)), ('CNOT', [1, 2], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [8, 2], None, None), ('BARRIER', [8, 3, 1, 2], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [1, 7], None, None), ('U3', 7, None, (0.0, -0.0129635992565174, -0.0129635992565174)), ('CNOT', [1, 7], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [2, 8], None, None), ('BARRIER', [2, 7, 1, 8], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [9, 8], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [7, 8], None, None), ('U3', 8, None, (0.0, 0.434347136811098, 0.434347136811098)), ('CNOT', [7, 8], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [3, 2], None, None), ('BARRIER', [3, 7, 2], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [1, 2], None, None), ('U3', 2, None, (0.0, -0.136841363753878, -0.136841363753878)), ('CNOT', [1, 2], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [3, 2], None, None), ('BARRIER', [3, 8, 1, 2], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [8, 9], None, None), ('U3', 9, None, (0.0, -0.0255263751669437, -0.0255263751669437)), ('CNOT', [8, 9], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [3, 9], None, None), ('BARRIER', [3, 8, 7, 9], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [8, 2], None, None), ('U3', 2, None, (0.0, 0.863552761014067, 0.863552761014067)), ('CNOT', [8, 2], None, None), ('CNOT', [3, 2], None, None), ('BARRIER', [3, 8, 2], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [3, 9], None, None), ('U3', 9, None, (0.0, -0.0574252282693863, -0.0574252282693863)), ('CNOT', [3, 9], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [9, 8], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [2, 8], None, None), ('BARRIER', [2, 9, 3, 8], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [9, 8], None, None), ('U3', 8, None, (0.0, 0.131866383336787, 0.131866383336787)), ('CNOT', [9, 8], None, None), ('CNOT', [2, 8], None, None), ('BARRIER', [2, 9, 8], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [4, 3], None, None), ('CNOT', [3, 4], None, None), ('U3', 3, None, (1.5707963267949, 2.22044604925031e-16, 3.14159265358979)), ('CNOT', [2, 3], None, None), ('U3', 3, None, (0.0, 2.99693751904428, 2.99693751904428)), ('CNOT', [2, 3], None, None), ('BARRIER', [2, 3], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [5, 6], None, None), ('CNOT', [6, 5], None, None), ('CNOT', [5, 6], None, None), ('CNOT', [4, 5], None, None), ('CNOT', [5, 4], None, None), ('CNOT', [4, 5], None, None), ('CNOT', [3, 4], None, None), ('U3', 4, None, (0.0, 0.593847019751603, 0.593847019751603)), ('CNOT', [3, 4], None, None), ('CNOT', [5, 4], None, None), ('CNOT', [4, 5], None, None), ('CNOT', [5, 4], None, None), ('CNOT', [6, 5], None, None), ('CNOT', [5, 6], None, None), ('CNOT', [6, 5], None, None), ('CNOT', [7, 6], None, None), ('BARRIER', [7, 3, 6], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [6, 7], None, None), ('U3', 7, None, (0.0, -0.131278036212827, -0.131278036212827)), ('CNOT', [6, 7], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [7, 1], None, None), ('BARRIER', [7, 2, 6, 1], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [6, 7], None, None), ('U3', 7, None, (0.0, -0.122396541063801, -0.122396541063801)), ('CNOT', [6, 7], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [1, 2], None, None), ('BARRIER', [1, 3, 6, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [5, 6], None, None), ('CNOT', [6, 5], None, None), ('CNOT', [5, 6], None, None), ('CNOT', [5, 4], None, None), ('U3', 4, None, (0.0, -0.155011343961285, -0.155011343961285)), ('CNOT', [5, 4], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [3, 4], None, None), ('BARRIER', [3, 2, 5, 4], None, None), ('CNOT', [9, 3], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [9, 3], None, None), ('CNOT', [9, 8], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [6, 5], None, None), ('CNOT', [5, 6], None, None), ('CNOT', [6, 5], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [7, 8], None, None), ('U3', 8, None, (0.0, -0.0603706941332203, -0.0603706941332203)), ('CNOT', [7, 8], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [9, 8], None, None), ('BARRIER', [9, 2, 7, 8], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [9, 8], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [2, 8], None, None), ('U3', 8, None, (0.0, 0.548339873010225, 0.548339873010225)), ('CNOT', [2, 8], None, None), ('CNOT', [7, 8], None, None), ('BARRIER', [7, 2, 8], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [7, 1], None, None), ('U3', 1, None, (0.0, -0.117221202787969, -0.117221202787969)), ('CNOT', [7, 1], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [8, 7], None, None), ('BARRIER', [8, 2, 1, 7], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [4, 3], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [1, 2], None, None), ('U3', 2, None, (0.0, -0.214024883412378, -0.214024883412378)), ('CNOT', [1, 2], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [8, 2], None, None), ('BARRIER', [8, 3, 1, 2], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [8, 9], None, None), ('U3', 9, None, (0.0, -0.00995755166820948, -0.00995755166820948)), ('CNOT', [8, 9], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [8, 9], None, None), ('BARRIER', [8, 3, 7, 9], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [3, 2], None, None), ('U3', 2, None, (0.0, 0.556556883930315, 0.556556883930315)), ('CNOT', [3, 2], None, None), ('CNOT', [8, 2], None, None), ('BARRIER', [8, 3, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [1, 2], None, None), ('U3', 2, None, (0.0, -0.157540108860848, -0.157540108860848)), ('CNOT', [1, 2], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [8, 2], None, None), ('BARRIER', [8, 3, 1, 2], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [8, 9], None, None), ('U3', 9, None, (0.0, -0.0423861870602703, -0.0423861870602703)), ('CNOT', [8, 9], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [8, 9], None, None), ('BARRIER', [8, 3, 7, 9], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [3, 2], None, None), ('U3', 2, None, (0.0, 0.791057276916163, 0.791057276916163)), ('CNOT', [3, 2], None, None), ('CNOT', [8, 2], None, None), ('BARRIER', [8, 3, 2], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [3, 9], None, None), ('U3', 9, None, (0.0, -0.118662519961827, -0.118662519961827)), ('CNOT', [3, 9], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [8, 9], None, None), ('BARRIER', [8, 3, 2, 9], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [3, 9], None, None), ('U3', 9, None, (0.0, 0.235320543008801, 0.235320543008801)), ('CNOT', [3, 9], None, None), ('CNOT', [8, 9], None, None), ('BARRIER', [8, 3, 9], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [7, 6], None, None), ('U3', 6, None, (0.0, -2.53368523612109, -2.53368523612109)), ('CNOT', [7, 6], None, None), ('BARRIER', [7, 6], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [6, 7], None, None), ('U3', 7, None, (0.0, 0.504634622497501, 0.504634622497501)), ('CNOT', [6, 7], None, None), ('CNOT', [1, 7], None, None), ('BARRIER', [1, 6, 7], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [7, 8], None, None), ('U3', 8, None, (0.0, 0.547203054814043, 0.547203054814043)), ('CNOT', [7, 8], None, None), ('CNOT', [2, 8], None, None), ('BARRIER', [2, 7, 8], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [7, 1], None, None), ('U3', 1, None, (0.0, 1.01442167107583, 1.01442167107583)), ('CNOT', [7, 1], None, None), ('CNOT', [2, 1], None, None), ('BARRIER', [2, 7, 1], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [9, 3], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [9, 3], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [9, 3], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [9, 8], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [7, 8], None, None), ('U3', 8, None, (0.0, 0.1954872138537, 0.1954872138537)), ('CNOT', [7, 8], None, None), ('CNOT', [2, 8], None, None), ('BARRIER', [2, 7, 8], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [5, 6], None, None), ('CNOT', [0, 6], None, None), ('U3', 6, None, (0.0, 0.833326442893949, 0.833326442893949)), ('CNOT', [0, 6], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [8, 7], None, None), ('U3', 7, None, (0.0, -1.79934287280455, -1.79934287280455)), ('CNOT', [8, 7], None, None), ('BARRIER', [8, 7], None, None), ('CNOT', [5, 6], None, None), ('CNOT', [8, 9], None, None), ('BARRIER', [5, 0, 6], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [8, 9], None, None), ('U3', 9, None, (0.0, 0.380969468603038, 0.380969468603038)), ('CNOT', [8, 9], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [8, 9], None, None), ('BARRIER', [8, 7, 9], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [1, 7], None, None), ('U3', 7, None, (0.0, 0.780505788678103, 0.780505788678103)), ('CNOT', [1, 7], None, None), ('CNOT', [8, 7], None, None), ('BARRIER', [8, 1, 7], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [1, 2], None, None), ('U3', 2, None, (0.0, 0.0593978174014311, 0.0593978174014311)), ('CNOT', [1, 2], None, None), ('CNOT', [8, 2], None, None), ('BARRIER', [8, 1, 2], None, None), ('CNOT', [8, 9], None, None), ('U3', 9, None, (0.0, -1.72150325238872, -1.72150325238872)), ('CNOT', [8, 9], None, None), ('BARRIER', [8, 9], None, None), ('CNOT', [0, 1], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [0, 1], None, None), ('CNOT', [6, 5], None, None), ('CNOT', [5, 6], None, None), ('CNOT', [6, 5], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [6, 5], None, None), ('CNOT', [5, 6], None, None), ('CNOT', [6, 5], None, None), ('CNOT', [6, 0], None, None), ('U3', 0, None, (0.0, -0.24924917011633, -0.24924917011633)), ('CNOT', [6, 0], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [6, 5], None, None), ('CNOT', [5, 6], None, None), ('CNOT', [6, 5], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [9, 8], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [8, 7], None, None), ('U3', 7, None, (0.0, 0.655033713318051, 0.655033713318051)), ('CNOT', [8, 7], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [8, 7], None, None), ('BARRIER', [6, 1, 5, 0], None, None), ('CNOT', [9, 8], None, None), ('BARRIER', [9, 7, 8], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [9, 8], None, None), ('CNOT', [7, 8], None, None), ('U3', 8, None, (0.0, 0.140795762385402, 0.140795762385402)), ('CNOT', [7, 8], None, None), ('CNOT', [9, 8], None, None), ('BARRIER', [9, 7, 8], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [9, 3], None, None), ('U3', 3, None, (0.0, -2.94217083537931, -2.94217083537931)), ('CNOT', [9, 3], None, None), ('BARRIER', [9, 3], None, None), ('CNOT', [9, 8], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [2, 8], None, None), ('U3', 8, None, (0.0, 0.348914366410313, 0.348914366410313)), ('CNOT', [2, 8], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [5, 6], None, None), ('U3', 6, None, (0.0, -0.126617943792678, -0.126617943792678)), ('CNOT', [5, 6], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [9, 8], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [7, 6], None, None), ('BARRIER', [9, 2, 8], None, None), ('BARRIER', [7, 1, 5, 6], None, None), ('CNOT', [9, 8], None, None), ('U3', 8, None, (0.0, -0.74224091006463, -0.74224091006463)), ('CNOT', [9, 8], None, None), ('BARRIER', [9, 8], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [6, 5], None, None), ('CNOT', [5, 6], None, None), ('CNOT', [6, 5], None, None), ('CNOT', [0, 6], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [0, 6], None, None), ('CNOT', [0, 1], None, None), ('U3', 1, None, (0.0, -0.143762313193084, -0.143762313193084)), ('CNOT', [0, 1], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [7, 1], None, None), ('BARRIER', [7, 2, 0, 1], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [0, 6], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [7, 8], None, None), ('U3', 8, None, (0.0, -0.130766915045365, -0.130766915045365)), ('CNOT', [7, 8], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [6, 7], None, None), ('BARRIER', [6, 2, 8, 7], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [0, 1], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [2, 1], None, None), ('U3', 1, None, (0.0, 0.757784485337448, 0.757784485337448)), ('CNOT', [2, 1], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [6, 7], None, None), ('BARRIER', [6, 2, 7], None, None), ('CNOT', [6, 5], None, None), ('CNOT', [4, 5], None, None), ('CNOT', [5, 4], None, None), ('CNOT', [4, 5], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [4, 3], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [2, 3], None, None), ('U3', 3, None, (0.0, -0.0622166444045815, -0.0622166444045815)), ('CNOT', [2, 3], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [6, 7], None, None), ('BARRIER', [6, 1, 3, 7], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [1, 0], None, None), ('U3', 0, None, (0.0, -0.14451158609731, -0.14451158609731)), ('CNOT', [1, 0], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [6, 0], None, None), ('BARRIER', [6, 1, 2, 0], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [8, 7], None, None), ('U3', 7, None, (0.0, -0.0929212237372732, -0.0929212237372732)), ('CNOT', [8, 7], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [6, 7], None, None), ('BARRIER', [6, 1, 8, 7], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [7, 8], None, None), ('U3', 8, None, (0.0, 0.317277208827292, 0.317277208827292)), ('CNOT', [7, 8], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [7, 8], None, None), ('BARRIER', [7, 1, 8], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [1, 0], None, None), ('U3', 0, None, (0.0, -0.0329852263645745, -0.0329852263645745)), ('CNOT', [1, 0], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [6, 0], None, None), ('BARRIER', [6, 1, 2, 0], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [8, 7], None, None), ('U3', 7, None, (0.0, -0.0500205432287037, -0.0500205432287037)), ('CNOT', [8, 7], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [6, 7], None, None), ('BARRIER', [6, 1, 8, 7], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [1, 0], None, None), ('U3', 0, None, (0.0, 0.471677305537743, 0.471677305537743)), ('CNOT', [1, 0], None, None), ('CNOT', [6, 0], None, None), ('BARRIER', [6, 1, 0], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [0, 6], None, None), ('U3', 6, None, (0.0, -0.0492112339906622, -0.0492112339906622)), ('CNOT', [0, 6], None, None), ('CNOT', [0, 1], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [0, 1], None, None), ('CNOT', [0, 6], None, None), ('CNOT', [7, 6], None, None), ('BARRIER', [7, 0, 1, 6], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [0, 6], None, None), ('U3', 6, None, (0.0, 0.364944673787125, 0.364944673787125)), ('CNOT', [0, 6], None, None), ('CNOT', [7, 6], None, None), ('BARRIER', [7, 0, 6], None, None), ('U3', 0, None, (0.0, -0.116745127576948, -0.116745127576948)), ('BARRIER', [0], None, None), ('CNOT', [6, 5], None, None), ('CNOT', [5, 6], None, None), ('CNOT', [6, 5], None, None), ('CNOT', [7, 6], None, None), ('U3', 6, None, (0.0, -1.83343229117445, -1.83343229117445)), ('CNOT', [7, 6], None, None), ('BARRIER', [7, 6], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [4, 3], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [4, 3], None, None), ('CNOT', [5, 4], None, None), ('CNOT', [4, 5], None, None), ('CNOT', [5, 4], None, None), ('CNOT', [6, 5], None, None), ('U3', 5, None, (0.0, 0.747231498068595, 0.747231498068595)), ('CNOT', [6, 5], None, None), ('CNOT', [4, 5], None, None), ('CNOT', [5, 4], None, None), ('CNOT', [4, 5], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [4, 3], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [2, 3], None, None), ('BARRIER', [2, 6, 3], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [3, 2], None, None), ('U3', 2, None, (0.0, -0.225361563789788, -0.225361563789788)), ('CNOT', [3, 2], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [2, 1], None, None), ('BARRIER', [2, 7, 3, 1], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [9, 3], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [9, 3], None, None), ('CNOT', [9, 8], None, None), ('U3', 8, None, (0.0, -0.179003281944885, -0.179003281944885)), ('CNOT', [9, 8], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [2, 8], None, None), ('BARRIER', [2, 7, 9, 8], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [9, 8], None, None), ('U3', 8, None, (0.0, -0.0753928509890595, -0.0753928509890595)), ('CNOT', [9, 8], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [1, 7], None, None), ('BARRIER', [1, 6, 9, 7], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [6, 5], None, None), ('CNOT', [5, 6], None, None), ('CNOT', [6, 5], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [5, 6], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [9, 8], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [7, 6], None, None), ('U3', 6, None, (0.0, -0.106776419647886, -0.106776419647886)), ('CNOT', [7, 6], None, None), ('CNOT', [5, 6], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [8, 7], None, None), ('BARRIER', [8, 5, 6, 7], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [4, 5], None, None), ('CNOT', [5, 4], None, None), ('CNOT', [4, 5], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [4, 3], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [3, 2], None, None), ('U3', 2, None, (0.0, 0.904681989075684, 0.904681989075684)), ('CNOT', [3, 2], None, None), ('CNOT', [8, 2], None, None), ('BARRIER', [8, 3, 2], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [3, 9], None, None), ('U3', 9, None, (0.0, -0.171538252978847, -0.171538252978847)), ('CNOT', [3, 9], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [9, 3], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [9, 3], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [9, 3], None, None), ('CNOT', [8, 9], None, None), ('BARRIER', [8, 2, 3, 9], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [3, 2], None, None), ('U3', 2, None, (0.0, -0.129943784534427, -0.129943784534427)), ('CNOT', [3, 2], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [8, 2], None, None), ('BARRIER', [8, 1, 3, 2], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [9, 3], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [9, 3], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [9, 8], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [8, 7], None, None), ('U3', 7, None, (0.0, -0.114112055811415, -0.114112055811415)), ('CNOT', [8, 7], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [9, 8], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [8, 7], None, None), ('BARRIER', [8, 1, 9, 7], None, None), ('CNOT', [9, 3], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [9, 3], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [9, 3], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [1, 2], None, None), ('U3', 2, None, (0.0, 0.592451096830452, 0.592451096830452)), ('CNOT', [1, 2], None, None), ('CNOT', [8, 2], None, None), ('BARRIER', [8, 1, 2], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [3, 2], None, None), ('U3', 2, None, (0.0, -0.13143878524139, -0.13143878524139)), ('CNOT', [3, 2], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [8, 2], None, None), ('BARRIER', [8, 1, 3, 2], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [9, 3], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [9, 3], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [9, 8], None, None), ('U3', 8, None, (0.0, -0.0525394540252876, -0.0525394540252876)), ('CNOT', [9, 8], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [7, 8], None, None), ('BARRIER', [7, 2, 9, 8], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [2, 1], None, None), ('U3', 1, None, (0.0, 0.454620756257185, 0.454620756257185)), ('CNOT', [2, 1], None, None), ('CNOT', [7, 1], None, None), ('BARRIER', [7, 2, 1], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [2, 8], None, None), ('U3', 8, None, (0.0, -0.0838040629462559, -0.0838040629462559)), ('CNOT', [2, 8], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [8, 7], None, None), ('BARRIER', [8, 1, 2, 7], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [1, 7], None, None), ('U3', 7, None, (0.0, 0.404357462851779, 0.404357462851779)), ('CNOT', [1, 7], None, None), ('CNOT', [8, 7], None, None), ('BARRIER', [8, 1, 7], None, None), ('CNOT', [0, 1], None, None), ('U3', 1, None, (0.0, -2.1425614926073, -2.1425614926073)), ('CNOT', [0, 1], None, None), ('BARRIER', [0, 1], None, None), ('CNOT', [6, 5], None, None), ('CNOT', [5, 6], None, None), ('CNOT', [6, 5], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [8, 7], None, None), ('U3', 7, None, (0.0, -1.91333509222546, -1.91333509222546)), ('CNOT', [8, 7], None, None), ('BARRIER', [8, 7], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [6, 5], None, None), ('CNOT', [5, 6], None, None), ('CNOT', [6, 5], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [8, 7], None, None), ('U3', 7, None, (0.0, 0.554998648280847, 0.554998648280847)), ('CNOT', [8, 7], None, None), ('CNOT', [6, 7], None, None), ('BARRIER', [6, 8, 7], None, None), ('CNOT', [5, 6], None, None), ('CNOT', [6, 5], None, None), ('CNOT', [5, 6], None, None), ('CNOT', [4, 5], None, None), ('CNOT', [5, 4], None, None), ('CNOT', [4, 5], None, None), ('CNOT', [4, 3], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [1, 2], None, None), ('U3', 2, None, (0.0, -0.170121903820837, -0.170121903820837)), ('CNOT', [1, 2], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [4, 3], None, None), ('BARRIER', [4, 8, 1, 3], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [4, 3], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [8, 9], None, None), ('U3', 9, None, (0.0, -0.0945658403214735, -0.0945658403214735)), ('CNOT', [8, 9], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [3, 9], None, None), ('BARRIER', [3, 8, 7, 9], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [1, 2], None, None), ('U3', 2, None, (0.0, -0.0683054606213443, -0.0683054606213443)), ('CNOT', [1, 2], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [3, 2], None, None), ('BARRIER', [3, 8, 1, 2], None, None), ('CNOT', [4, 3], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [4, 3], None, None), ('CNOT', [5, 6], None, None), ('CNOT', [6, 5], None, None), ('CNOT', [5, 6], None, None), ('CNOT', [4, 5], None, None), ('CNOT', [6, 5], None, None), ('CNOT', [5, 6], None, None), ('CNOT', [6, 5], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [1, 7], None, None), ('U3', 7, None, (0.0, -0.114038478068323, -0.114038478068323)), ('CNOT', [1, 7], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [5, 6], None, None), ('CNOT', [6, 5], None, None), ('CNOT', [5, 6], None, None), ('CNOT', [4, 5], None, None), ('BARRIER', [4, 8, 1, 5], None, None), ('CNOT', [4, 3], None, None), ('CNOT', [9, 3], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [9, 3], None, None), ('CNOT', [8, 9], None, None), ('U3', 9, None, (0.0, 0.992453365802517, 0.992453365802517)), ('CNOT', [8, 9], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [9, 3], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [4, 3], None, None), ('BARRIER', [4, 8, 3], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [4, 3], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [4, 3], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [3, 9], None, None), ('U3', 9, None, (0.0, -0.221972073146935, -0.221972073146935)), ('CNOT', [3, 9], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [4, 3], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [3, 9], None, None), ('BARRIER', [3, 8, 4, 9], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [4, 3], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [3, 2], None, None), ('U3', 2, None, (0.0, -0.116950317759878, -0.116950317759878)), ('CNOT', [3, 2], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [4, 3], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [3, 2], None, None), ('BARRIER', [3, 8, 4, 2], None, None), ('CNOT', [4, 5], None, None), ('CNOT', [5, 4], None, None), ('CNOT', [4, 5], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [5, 4], None, None), ('U3', 4, None, (0.0, -0.171218085486357, -0.171218085486357)), ('CNOT', [5, 4], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [4, 3], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [2, 3], None, None), ('BARRIER', [2, 4, 5, 3], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [9, 3], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [4, 3], None, None), ('U3', 3, None, (0.0, 0.691802772127917, 0.691802772127917)), ('CNOT', [4, 3], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [8, 2], None, None), ('BARRIER', [8, 4, 2], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [4, 3], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [4, 3], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [3, 2], None, None), ('U3', 2, None, (0.0, -0.0734443753765234, -0.0734443753765234)), ('CNOT', [3, 2], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [4, 3], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [8, 2], None, None), ('BARRIER', [8, 3, 4, 2], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [4, 3], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [3, 9], None, None), ('U3', 9, None, (0.0, -0.101770301329308, -0.101770301329308)), ('CNOT', [3, 9], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [4, 3], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [8, 9], None, None), ('BARRIER', [8, 3, 4, 9], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [3, 2], None, None), ('U3', 2, None, (0.0, 0.381812250738819, 0.381812250738819)), ('CNOT', [3, 2], None, None), ('CNOT', [8, 2], None, None), ('BARRIER', [8, 3, 2], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [9, 8], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [2, 8], None, None), ('U3', 8, None, (0.0, -0.0788761659507815, -0.0788761659507815)), ('CNOT', [2, 8], None, None), ('CNOT', [9, 3], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [9, 3], None, None), ('CNOT', [9, 8], None, None), ('CNOT', [9, 8], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [9, 8], None, None), ('CNOT', [3, 9], None, None), ('BARRIER', [3, 8, 2, 9], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [8, 9], None, None), ('U3', 9, None, (0.0, 0.503531057157117, 0.503531057157117)), ('CNOT', [8, 9], None, None), ('CNOT', [3, 9], None, None), ('BARRIER', [3, 8, 9], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [3, 2], None, None), ('U3', 2, None, (0.0, -2.53192005741762, -2.53192005741762)), ('CNOT', [3, 2], None, None), ('BARRIER', [3, 2], None, None), ('CNOT', [4, 5], None, None), ('CNOT', [5, 4], None, None), ('CNOT', [4, 5], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [4, 3], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [2, 3], None, None), ('U3', 3, None, (0.0, 0.860446426043695, 0.860446426043695)), ('CNOT', [2, 3], None, None), ('CNOT', [4, 3], None, None), ('BARRIER', [4, 2, 3], None, None), ('CNOT', [4, 5], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [4, 3], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [4, 3], None, None), ('CNOT', [4, 5], None, None), ('U3', 5, None, (0.0, 0.545242156546146, 0.545242156546146)), ('CNOT', [4, 5], None, None), ('CNOT', [4, 5], None, None), ('CNOT', [5, 4], None, None), ('CNOT', [4, 5], None, None), ('CNOT', [3, 4], None, None), ('BARRIER', [3, 5, 4], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [4, 5], None, None), ('CNOT', [5, 4], None, None), ('CNOT', [4, 5], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [4, 3], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [3, 2], None, None), ('U3', 2, None, (0.0, 0.470875772711383, 0.470875772711383)), ('CNOT', [3, 2], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [4, 3], None, None), ('BARRIER', [4, 2, 3], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [4, 3], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [8, 9], None, None), ('U3', 9, None, (0.0, 0.425619447247151, 0.425619447247151)), ('CNOT', [8, 9], None, None), ('CNOT', [3, 9], None, None), ('BARRIER', [3, 8, 9], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [3, 2], None, None), ('U3', 2, None, (0.0, -3.089281297148, -3.089281297148)), ('CNOT', [3, 2], None, None), ('CNOT', [0, 1], None, None), ('CNOT', [7, 1], None, None), ('U3', 1, None, (0.0, 1.25017240868835, 1.25017240868835)), ('CNOT', [7, 1], None, None), ('BARRIER', [3, 2], None, None), ('CNOT', [0, 1], None, None), ('BARRIER', [0, 7, 1], None, None), ('CNOT', [4, 3], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [4, 3], None, None), ('CNOT', [4, 5], None, None), ('CNOT', [4, 5], None, None), ('CNOT', [5, 4], None, None), ('CNOT', [4, 5], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [4, 3], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [2, 3], None, None), ('U3', 3, None, (0.0, 0.726955159609568, 0.726955159609568)), ('CNOT', [2, 3], None, None), ('CNOT', [4, 5], None, None), ('CNOT', [5, 4], None, None), ('CNOT', [4, 5], None, None), ('CNOT', [4, 3], None, None), ('BARRIER', [4, 2, 3], None, None), ('CNOT', [4, 5], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [4, 3], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [4, 3], None, None), ('CNOT', [4, 5], None, None), ('U3', 5, None, (0.0, 0.638313492509296, 0.638313492509296)), ('CNOT', [4, 5], None, None), ('CNOT', [4, 5], None, None), ('CNOT', [5, 4], None, None), ('CNOT', [4, 5], None, None), ('CNOT', [3, 4], None, None), ('BARRIER', [3, 5, 4], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [9, 3], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [4, 3], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [4, 3], None, None), ('CNOT', [5, 4], None, None), ('U3', 4, None, (0.0, 0.51913364789276, 0.51913364789276)), ('CNOT', [5, 4], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [9, 3], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [3, 4], None, None), ('BARRIER', [3, 5, 4], None, None), ('CNOT', [3, 2], None, None), ('U3', 2, None, (0.0, -2.14251876251648, -2.14251876251648)), ('CNOT', [3, 2], None, None), ('BARRIER', [3, 2], None, None), ('CNOT', [6, 5], None, None), ('CNOT', [5, 6], None, None), ('CNOT', [6, 5], None, None), ('CNOT', [0, 6], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [9, 8], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [2, 8], None, None), ('U3', 8, None, (0.0, 0.414916474640702, 0.414916474640702)), ('CNOT', [2, 8], None, None), ('CNOT', [0, 1], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [0, 1], None, None), ('CNOT', [0, 6], None, None), ('U3', 6, None, (0.0, -0.316154152135019, -0.316154152135019)), ('CNOT', [0, 6], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [0, 6], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [0, 6], None, None), ('CNOT', [1, 0], None, None), ('BARRIER', [1, 7, 6, 0], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [3, 2], None, None), ('BARRIER', [3, 8, 2], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [4, 3], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [2, 3], None, None), ('U3', 3, None, (0.0, 0.377744692941094, 0.377744692941094)), ('CNOT', [2, 3], None, None), ('CNOT', [4, 3], None, None), ('BARRIER', [4, 2, 3], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [4, 3], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [3, 2], None, None), ('U3', 2, None, (0.0, -1.88693002343004, -1.88693002343004)), ('CNOT', [3, 2], None, None), ('BARRIER', [3, 2], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [6, 7], None, None), ('U3', 7, None, (0.0, -0.127908808898685, -0.127908808898685)), ('CNOT', [6, 7], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [4, 3], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [2, 3], None, None), ('U3', 3, None, (0.0, 0.312601292721976, 0.312601292721976)), ('CNOT', [2, 3], None, None), ('CNOT', [4, 3], None, None), ('BARRIER', [1, 8, 6, 7], None, None), ('BARRIER', [4, 2, 3], None, None), ('CNOT', [4, 3], None, None), ('U3', 3, None, (0.0, -1.50874003050724, -1.50874003050724)), ('CNOT', [4, 3], None, None), ('CNOT', [1, 2], None, None), ('BARRIER', [4, 3], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [0, 6], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [0, 6], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [0, 1], None, None), ('U3', 1, None, (0.0, -0.215697195315719, -0.215697195315719)), ('CNOT', [0, 1], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [1, 2], None, None), ('BARRIER', [1, 8, 0, 2], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [0, 1], None, None), ('U3', 1, None, (0.0, -0.153203950351592, -0.153203950351592)), ('CNOT', [0, 1], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [1, 2], None, None), ('BARRIER', [1, 8, 0, 2], None, None), ('CNOT', [0, 6], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [0, 6], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [0, 6], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [8, 7], None, None), ('U3', 7, None, (0.0, 0.888697881693193, 0.888697881693193)), ('CNOT', [8, 7], None, None), ('CNOT', [1, 7], None, None), ('BARRIER', [1, 8, 7], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [6, 7], None, None), ('U3', 7, None, (0.0, -0.113325666166263, -0.113325666166263)), ('CNOT', [6, 7], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [1, 7], None, None), ('BARRIER', [1, 8, 6, 7], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [6, 7], None, None), ('U3', 7, None, (0.0, -0.119750534666842, -0.119750534666842)), ('CNOT', [6, 7], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [1, 7], None, None), ('BARRIER', [1, 8, 6, 7], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [0, 6], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [0, 6], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [0, 1], None, None), ('U3', 1, None, (0.0, -0.114797096768015, -0.114797096768015)), ('CNOT', [0, 1], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [2, 1], None, None), ('BARRIER', [2, 7, 0, 1], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [9, 3], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [9, 3], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [9, 8], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [7, 8], None, None), ('U3', 8, None, (0.0, 0.42080662812529, 0.42080662812529)), ('CNOT', [7, 8], None, None), ('CNOT', [2, 8], None, None), ('BARRIER', [2, 7, 8], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [9, 8], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [9, 8], None, None), ('U3', 8, None, (0.0, -0.0982670359851065, -0.0982670359851065)), ('CNOT', [9, 8], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [2, 8], None, None), ('BARRIER', [2, 7, 9, 8], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [9, 8], None, None), ('U3', 8, None, (0.0, -0.0622750908242021, -0.0622750908242021)), ('CNOT', [9, 8], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [1, 7], None, None), ('BARRIER', [1, 8, 9, 7], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [8, 2], None, None), ('U3', 2, None, (0.0, 0.522272227891599, 0.522272227891599)), ('CNOT', [8, 2], None, None), ('CNOT', [1, 2], None, None), ('BARRIER', [1, 8, 2], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [2, 1], None, None), ('U3', 1, None, (0.0, -0.0581452870607163, -0.0581452870607163)), ('CNOT', [2, 1], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [7, 1], None, None), ('BARRIER', [7, 2, 8, 1], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [2, 1], None, None), ('U3', 1, None, (0.0, 0.440137164381021, 0.440137164381021)), ('CNOT', [2, 1], None, None), ('CNOT', [7, 1], None, None), ('BARRIER', [7, 2, 1], None, None), ('U3', 2, None, (0.0, 0.203974718188377, 0.203974718188377)), ('BARRIER', [2], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [7, 1], None, None), ('U3', 1, None, (0.0, -2.33145947374511, -2.33145947374511)), ('CNOT', [7, 1], None, None), ('BARRIER', [7, 1], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [7, 6], None, None), ('U3', 6, None, (0.0, 1.04954361241041, 1.04954361241041)), ('CNOT', [7, 6], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [7, 6], None, None), ('BARRIER', [7, 1, 6], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [6, 0], None, None), ('U3', 0, None, (0.0, -0.30612714891974, -0.30612714891974)), ('CNOT', [6, 0], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [0, 6], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [7, 6], None, None), ('BARRIER', [7, 1, 0, 6], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [9, 8], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [0, 1], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [2, 8], None, None), ('U3', 8, None, (0.0, -0.151782643548576, -0.151782643548576)), ('CNOT', [2, 8], None, None), ('CNOT', [9, 8], None, None), ('CNOT', [7, 8], None, None), ('BARRIER', [7, 9, 2, 8], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [0, 1], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [9, 3], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [3, 2], None, None), ('U3', 2, None, (0.0, -0.154824266248361, -0.154824266248361)), ('CNOT', [3, 2], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [7, 1], None, None), ('BARRIER', [7, 2, 3, 1], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [0, 1], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [3, 2], None, None), ('U3', 2, None, (0.0, -0.18881154101762, -0.18881154101762)), ('CNOT', [3, 2], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [7, 1], None, None), ('BARRIER', [7, 2, 3, 1], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [0, 6], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [0, 6], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [0, 1], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [2, 1], None, None), ('U3', 1, None, (0.0, 1.04747106788074, 1.04747106788074)), ('CNOT', [2, 1], None, None), ('CNOT', [7, 1], None, None), ('BARRIER', [7, 2, 1], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [2, 8], None, None), ('U3', 8, None, (0.0, -0.0908531988242029, -0.0908531988242029)), ('CNOT', [2, 8], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [7, 8], None, None), ('BARRIER', [7, 1, 2, 8], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [0, 1], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [0, 1], None, None), ('CNOT', [0, 6], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [7, 6], None, None), ('U3', 6, None, (0.0, -0.162175384052315, -0.162175384052315)), ('CNOT', [7, 6], None, None), ('CNOT', [0, 6], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [7, 6], None, None), ('BARRIER', [7, 0, 8, 6], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [0, 1], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [2, 1], None, None), ('U3', 1, None, (0.0, -0.217131881605421, -0.217131881605421)), ('CNOT', [2, 1], None, None), ('CNOT', [0, 1], None, None), ('CNOT', [7, 1], None, None), ('BARRIER', [7, 0, 2, 1], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [0, 1], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [1, 2], None, None), ('U3', 2, None, (0.0, 0.404058192311322, 0.404058192311322)), ('CNOT', [1, 2], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [7, 8], None, None), ('BARRIER', [7, 1, 8], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [8, 7], None, None), ('U3', 7, None, (0.0, -0.0557848108799904, -0.0557848108799904)), ('CNOT', [8, 7], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [6, 7], None, None), ('BARRIER', [6, 1, 8, 7], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [1, 0], None, None), ('U3', 0, None, (0.0, -0.0581466074452842, -0.0581466074452842)), ('CNOT', [1, 0], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [6, 0], None, None), ('BARRIER', [6, 1, 2, 0], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [1, 7], None, None), ('U3', 7, None, (0.0, 0.600735457418316, 0.600735457418316)), ('CNOT', [1, 7], None, None), ('CNOT', [6, 7], None, None), ('BARRIER', [6, 1, 7], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [6, 0], None, None), ('U3', 0, None, (0.0, -0.144970504958518, -0.144970504958518)), ('CNOT', [6, 0], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [0, 1], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [7, 1], None, None), ('BARRIER', [7, 0, 6, 1], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [0, 1], None, None), ('U3', 1, None, (0.0, 0.760259131224352, 0.760259131224352)), ('CNOT', [0, 1], None, None), ('CNOT', [7, 1], None, None), ('BARRIER', [7, 0, 1], None, None), ('CNOT', [9, 3], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [9, 3], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [0, 1], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [3, 2], None, None), ('U3', 2, None, (0.0, -2.42621260985298, -2.42621260985298)), ('CNOT', [3, 2], None, None), ('BARRIER', [3, 2], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [9, 8], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [7, 8], None, None), ('U3', 8, None, (0.0, 2.13812951020748, 2.13812951020748)), ('CNOT', [7, 8], None, None), ('BARRIER', [7, 8], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [9, 8], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [9, 8], None, None), ('U3', 8, None, (0.0, 1.27817299091939, 1.27817299091939)), ('CNOT', [9, 8], None, None), ('CNOT', [7, 8], None, None), ('BARRIER', [7, 9, 8], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [9, 3], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [2, 1], None, None), ('U3', 1, None, (0.0, 0.572156612610233, 0.572156612610233)), ('CNOT', [2, 1], None, None), ('CNOT', [7, 1], None, None), ('BARRIER', [7, 2, 1], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [8, 7], None, None), ('U3', 7, None, (0.0, 1.0319963365475, 1.0319963365475)), ('CNOT', [8, 7], None, None), ('CNOT', [6, 7], None, None), ('BARRIER', [6, 8, 7], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [0, 6], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [8, 7], None, None), ('U3', 7, None, (0.0, 0.725299817653128, 0.725299817653128)), ('CNOT', [8, 7], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [0, 6], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [6, 7], None, None), ('BARRIER', [6, 8, 7], None, None), ('CNOT', [9, 8], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [3, 2], None, None), ('U3', 2, None, (0.0, 1.02044819732696, 1.02044819732696)), ('CNOT', [3, 2], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [7, 8], None, None), ('U3', 8, None, (0.0, 2.89010986418755, 2.89010986418755)), ('CNOT', [7, 8], None, None), ('BARRIER', [7, 8], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [2, 1], None, None), ('U3', 1, None, (0.0, 0.349579825800703, 0.349579825800703)), ('CNOT', [2, 1], None, None), ('CNOT', [9, 8], None, None), ('BARRIER', [9, 3, 8], None, None), ('CNOT', [7, 1], None, None), ('BARRIER', [7, 2, 1], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [1, 0], None, None), ('U3', 0, None, (0.0, 0.823462641955351, 0.823462641955351)), ('CNOT', [1, 0], None, None), ('CNOT', [6, 0], None, None), ('BARRIER', [6, 1, 0], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [1, 7], None, None), ('U3', 7, None, (0.0, 0.610767446507451, 0.610767446507451)), ('CNOT', [1, 7], None, None), ('CNOT', [6, 7], None, None), ('BARRIER', [6, 1, 7], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [9, 3], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [7, 1], None, None), ('U3', 1, None, (0.0, -1.43332613753848, -1.43332613753848)), ('CNOT', [7, 1], None, None), ('BARRIER', [7, 1], None, None), ('CNOT', [9, 3], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [9, 3], None, None), ('CNOT', [8, 9], None, None), ('U3', 9, None, (0.0, -0.311450776138087, -0.311450776138087)), ('CNOT', [8, 9], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [0, 1], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [0, 1], None, None), ('U3', 1, None, (0.0, 0.275710460229474, 0.275710460229474)), ('CNOT', [0, 1], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [3, 2], None, None), ('BARRIER', [7, 0, 1], None, None), ('CNOT', [3, 9], None, None), ('BARRIER', [3, 2, 8, 9], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [0, 6], None, None), ('U3', 6, None, (0.0, 0.226223485003688, 0.226223485003688)), ('CNOT', [0, 6], None, None), ('CNOT', [7, 6], None, None), ('BARRIER', [7, 0, 6], None, None), ('CNOT', [7, 1], None, None), ('U3', 1, None, (0.0, -2.73325279137136, -2.73325279137136)), ('CNOT', [7, 1], None, None), ('BARRIER', [7, 1], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [0, 1], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [8, 2], None, None), ('U3', 2, None, (0.0, -0.196374826575251, -0.196374826575251)), ('CNOT', [8, 2], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [0, 6], None, None), ('U3', 6, None, (0.0, 0.499510052223201, 0.499510052223201)), ('CNOT', [0, 6], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [3, 2], None, None), ('BARRIER', [7, 0, 6], None, None), ('BARRIER', [3, 1, 8, 2], None, None), ('CNOT', [7, 6], None, None), ('U3', 6, None, (0.0, -1.96393798364002, -1.96393798364002)), ('CNOT', [7, 6], None, None), ('BARRIER', [7, 6], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [0, 1], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [0, 1], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [8, 2], None, None), ('U3', 2, None, (0.0, -0.12897707801847, -0.12897707801847)), ('CNOT', [8, 2], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [3, 2], None, None), ('BARRIER', [3, 1, 8, 2], None, None), ('CNOT', [4, 3], None, None), ('CNOT', [3, 4], None, None), ('CNOT', [4, 3], None, None), ('CNOT', [5, 4], None, None), ('CNOT', [4, 5], None, None), ('CNOT', [5, 4], None, None), ('CNOT', [5, 6], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [8, 7], None, None), ('U3', 7, None, (0.0, -0.147875938634231, -0.147875938634231)), ('CNOT', [8, 7], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [6, 5], None, None), ('CNOT', [5, 6], None, None), ('CNOT', [6, 5], None, None), ('CNOT', [6, 7], None, None), ('BARRIER', [6, 1, 8, 7], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [9, 8], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [1, 7], None, None), ('U3', 7, None, (0.0, 1.20402133067577, 1.20402133067577)), ('CNOT', [1, 7], None, None), ('CNOT', [6, 7], None, None), ('BARRIER', [6, 1, 7], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [6, 0], None, None), ('U3', 0, None, (0.0, -0.203978323460064, -0.203978323460064)), ('CNOT', [6, 0], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [0, 6], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [7, 6], None, None), ('BARRIER', [7, 1, 0, 6], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [0, 1], None, None), ('U3', 1, None, (0.0, -0.176205430855759, -0.176205430855759)), ('CNOT', [0, 1], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [7, 1], None, None), ('BARRIER', [7, 2, 0, 1], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [0, 6], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [7, 8], None, None), ('U3', 8, None, (0.0, -0.156636685224354, -0.156636685224354)), ('CNOT', [7, 8], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [7, 8], None, None), ('BARRIER', [7, 2, 6, 8], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [0, 6], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [0, 6], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [0, 6], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [0, 1], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [2, 1], None, None), ('U3', 1, None, (0.0, 0.724317329253649, 0.724317329253649)), ('CNOT', [2, 1], None, None), ('CNOT', [7, 1], None, None), ('BARRIER', [7, 2, 1], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [0, 1], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [0, 1], None, None), ('U3', 1, None, (0.0, -0.127829134097444, -0.127829134097444)), ('CNOT', [0, 1], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [7, 1], None, None), ('BARRIER', [7, 2, 0, 1], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [0, 6], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [7, 8], None, None), ('U3', 8, None, (0.0, -0.114459719944715, -0.114459719944715)), ('CNOT', [7, 8], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [7, 8], None, None), ('BARRIER', [7, 2, 6, 8], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [2, 1], None, None), ('U3', 1, None, (0.0, 0.557488706963746, 0.557488706963746)), ('CNOT', [2, 1], None, None), ('CNOT', [7, 1], None, None), ('BARRIER', [7, 2, 1], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [2, 8], None, None), ('U3', 8, None, (0.0, -0.0445883931796692, -0.0445883931796692)), ('CNOT', [2, 8], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [7, 8], None, None), ('BARRIER', [7, 2, 1, 8], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [2, 8], None, None), ('U3', 8, None, (0.0, 0.528313351760909, 0.528313351760909)), ('CNOT', [2, 8], None, None), ('CNOT', [7, 8], None, None), ('BARRIER', [7, 2, 8], None, None), ('U3', 2, None, (0.0, 0.393881568419717, 0.393881568419717)), ('BARRIER', [2], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [9, 8], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [7, 8], None, None), ('U3', 8, None, (0.0, 2.1348466987133, 2.1348466987133)), ('CNOT', [7, 8], None, None), ('BARRIER', [7, 8], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [0, 1], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [2, 1], None, None), ('U3', 1, None, (0.0, 1.34867821707274, 1.34867821707274)), ('CNOT', [2, 1], None, None), ('CNOT', [7, 1], None, None), ('BARRIER', [7, 2, 1], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [8, 7], None, None), ('U3', 7, None, (0.0, 0.804633366936815, 0.804633366936815)), ('CNOT', [8, 7], None, None), ('CNOT', [6, 7], None, None), ('BARRIER', [6, 8, 7], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [1, 0], None, None), ('U3', 0, None, (0.0, 0.918547012438366, 0.918547012438366)), ('CNOT', [1, 0], None, None), ('CNOT', [6, 0], None, None), ('BARRIER', [6, 1, 0], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [9, 8], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [2, 8], None, None), ('U3', 8, None, (0.0, 0.56346336439634, 0.56346336439634)), ('CNOT', [2, 8], None, None), ('CNOT', [7, 8], None, None), ('BARRIER', [7, 2, 8], None, None), ('CNOT', [7, 1], None, None), ('U3', 1, None, (0.0, 2.51398545979328, 2.51398545979328)), ('CNOT', [7, 1], None, None), ('BARRIER', [7, 1], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [9, 3], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [3, 2], None, None), ('U3', 2, None, (0.0, 2.86892728670635, 2.86892728670635)), ('CNOT', [3, 2], None, None), ('BARRIER', [3, 2], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [0, 6], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [0, 6], None, None), ('CNOT', [1, 0], None, None), ('U3', 0, None, (0.0, 0.712279126941969, 0.712279126941969)), ('CNOT', [1, 0], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [0, 1], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [7, 1], None, None), ('BARRIER', [7, 0, 1], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [0, 6], None, None), ('U3', 6, None, (0.0, 0.820119805502642, 0.820119805502642)), ('CNOT', [0, 6], None, None), ('CNOT', [7, 6], None, None), ('BARRIER', [7, 0, 6], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [0, 1], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [2, 8], None, None), ('U3', 8, None, (0.0, 0.499677148478675, 0.499677148478675)), ('CNOT', [2, 8], None, None), ('CNOT', [7, 8], None, None), ('BARRIER', [7, 2, 8], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [1, 2], None, None), ('U3', 2, None, (0.0, 1.15413349867275, 1.15413349867275)), ('CNOT', [1, 2], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [0, 1], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [7, 1], None, None), ('U3', 1, None, (0.0, -2.25420985945096, -2.25420985945096)), ('CNOT', [7, 1], None, None), ('BARRIER', [7, 1], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [7, 6], None, None), ('BARRIER', [3, 0, 2], None, None), ('CNOT', [0, 6], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [0, 6], None, None), ('CNOT', [1, 0], None, None), ('U3', 0, None, (0.0, 0.537782575246815, 0.537782575246815)), ('CNOT', [1, 0], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [0, 6], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [7, 6], None, None), ('BARRIER', [7, 1, 6], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [2, 8], None, None), ('U3', 8, None, (0.0, 0.303080280483436, 0.303080280483436)), ('CNOT', [2, 8], None, None), ('CNOT', [7, 8], None, None), ('BARRIER', [7, 2, 8], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [7, 6], None, None), ('U3', 6, None, (0.0, -2.64396907578256, -2.64396907578256)), ('CNOT', [7, 6], None, None), ('BARRIER', [7, 6], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [0, 1], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [1, 2], None, None), ('U3', 2, None, (0.0, 0.704698760767767, 0.704698760767767)), ('CNOT', [1, 2], None, None), ('CNOT', [3, 2], None, None), ('BARRIER', [3, 1, 2], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [7, 6], None, None), ('CNOT', [7, 8], None, None), ('U3', 8, None, (0.0, 0.308971491294832, 0.308971491294832)), ('CNOT', [7, 8], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [6, 7], None, None), ('BARRIER', [6, 8, 7], None, None), ('CNOT', [6, 7], None, None), ('U3', 7, None, (0.0, -1.59800332653572, -1.59800332653572)), ('CNOT', [6, 7], None, None), ('BARRIER', [6, 7], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [7, 8], None, None), ('U3', 8, None, (0.0, 0.592891167067779, 0.592891167067779)), ('CNOT', [7, 8], None, None), ('CNOT', [2, 8], None, None), ('BARRIER', [2, 7, 8], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [7, 1], None, None), ('U3', 1, None, (0.0, 0.665068649120465, 0.665068649120465)), ('CNOT', [7, 1], None, None), ('CNOT', [2, 1], None, None), ('BARRIER', [2, 7, 1], None, None), ('U3', 7, None, (0.0, -0.78934864399752, -0.78934864399752)), ('BARRIER', [7], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [0, 1], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [2, 1], None, None), ('U3', 1, None, (0.0, -0.992672999047257, -0.992672999047257)), ('CNOT', [2, 1], None, None), ('BARRIER', [2, 1], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [2, 3], None, None), ('U3', 3, None, (0.0, 0.908153886394198, 0.908153886394198)), ('CNOT', [2, 3], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [3, 2], None, None), ('CNOT', [2, 3], None, None), ('CNOT', [1, 2], None, None), ('BARRIER', [1, 3, 2], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [9, 3], None, None), ('CNOT', [3, 9], None, None), ('CNOT', [9, 3], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [9, 8], None, None), ('CNOT', [8, 9], None, None), ('CNOT', [8, 7], None, None), ('U3', 7, None, (0.0, 0.822138984880246, 0.822138984880246)), ('CNOT', [8, 7], None, None), ('CNOT', [1, 7], None, None), ('BARRIER', [1, 8, 7], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [0, 1], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [2, 1], None, None), ('U3', 1, None, (0.0, 0.788885436930537, 0.788885436930537)), ('CNOT', [2, 1], None, None), ('CNOT', [0, 1], None, None), ('BARRIER', [0, 2, 1], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [9, 8], None, None), ('U3', 8, None, (0.0, 1.48650853626666, 1.48650853626666)), ('CNOT', [9, 8], None, None), ('BARRIER', [9, 8], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [0, 1], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [1, 2], None, None), ('U3', 2, None, (0.0, -2.59037515761193, -2.59037515761193)), ('CNOT', [1, 2], None, None), ('BARRIER', [1, 2], None, None), ('CNOT', [1, 7], None, None), ('U3', 8, None, (0.0, 0.0436019932193938, 0.0436019932193938)), ('BARRIER', [8], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [8, 7], None, None), ('U3', 7, None, (0.0, 0.513393313076571, 0.513393313076571)), ('CNOT', [8, 7], None, None), ('CNOT', [1, 7], None, None), ('BARRIER', [1, 8, 7], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [0, 1], None, None), ('CNOT', [1, 0], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [2, 1], None, None), ('U3', 1, None, (0.0, 0.418586094665511, 0.418586094665511)), ('CNOT', [2, 1], None, None), ('CNOT', [0, 1], None, None), ('BARRIER', [0, 2, 1], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [9, 8], None, None), ('U3', 8, None, (0.0, 2.7501239589451, 2.7501239589451)), ('CNOT', [9, 8], None, None), ('BARRIER', [9, 8], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [0, 6], None, None), ('CNOT', [6, 0], None, None), ('CNOT', [6, 7], None, None), ('U3', 7, None, (0.0, -2.45555339222735, -2.45555339222735)), ('CNOT', [6, 7], None, None), ('BARRIER', [6, 7], None, None), ('CNOT', [2, 8], None, None), ('U3', 8, None, (0.0, -1.86718747970561, -1.86718747970561)), ('CNOT', [2, 8], None, None), ('BARRIER', [2, 8], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [1, 7], None, None), ('CNOT', [7, 1], None, None), ('CNOT', [6, 7], None, None), ('CNOT', [1, 7], None, None), ('U3', 7, None, (0.0, 0.473392281160882, 0.473392281160882)), ('CNOT', [1, 7], None, None), ('U3', 8, None, (0.0, 2.97051765190729, 2.97051765190729)), ('BARRIER', [8], None, None), ('CNOT', [6, 7], None, None), ('BARRIER', [6, 1, 7], None, None), ('CNOT', [6, 7], None, None), ('U3', 7, None, (0.0, -2.23328502884769, -2.23328502884769)), ('CNOT', [6, 7], None, None), ('BARRIER', [6, 7], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [2, 8], None, None), ('CNOT', [8, 2], None, None), ('CNOT', [9, 8], None, None), ('U3', 8, None, (0.0, 2.15038736832957, 2.15038736832957)), ('CNOT', [9, 8], None, None), ('BARRIER', [9, 8], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [7, 8], None, None), ('CNOT', [8, 7], None, None), ('CNOT', [9, 8], None, None), ('U3', 8, None, (0.0, 3.05287920289279, 3.05287920289279)), ('CNOT', [9, 8], None, None), ('CNOT', [1, 7], None, None), ('U3', 7, None, (0.0, -2.32283880141161, -2.32283880141161)), ('CNOT', [1, 7], None, None), ('BARRIER', [1, 7], None, None), ('BARRIER', [9, 8], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [2, 8], None, None), ('U3', 8, None, (0.0, -1.55204593239419, -1.55204593239419)), ('CNOT', [2, 8], None, None), ('CNOT', [1, 7], None, None), ('U3', 7, None, (0.0, -1.38157298808409, -1.38157298808409)), ('CNOT', [1, 7], None, None), ('BARRIER', [1, 7], None, None), ('BARRIER', [2, 8], None, None), ('U3', 7, None, (0.0, -1.92625823014812, -1.92625823014812)), ('BARRIER', [7], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [1, 2], None, None), ('CNOT', [2, 1], None, None), ('CNOT', [2, 8], None, None), ('U3', 8, None, (0.0, -0.888091967624638, -0.888091967624638)), ('CNOT', [2, 8], None, None), ('BARRIER', [2, 8], None, None), ('CNOT', [7, 8], None, None), ('U3', 8, None, (0.0, -1.13947690870024, -1.13947690870024)), ('CNOT', [7, 8], None, None), ('BARRIER', [7, 8], None, None), ('U3', 8, None, (0.0, 2.02950252093888, 2.02950252093888)), ('BARRIER', [8], None, None), ('U3', 6, None, (0.56084554, -1.5707963267949, 1.5707963267949)), ('U3', 5, None, (0.56084554, -1.5707963267949, 1.5707963267949)), ('U3', 1, None, (0.56084554, -1.5707963267949, 1.5707963267949)), ('U3', 3, None, (0.56084554, -1.5707963267949, 1.5707963267949)), ('U3', 4, None, (0.56084554, -1.5707963267949, 1.5707963267949)), ('U3', 0, None, (0.56084554, -1.5707963267949, 1.5707963267949)), ('U3', 9, None, (0.56084554, -1.5707963267949, 1.5707963267949)), ('U3', 2, None, (0.56084554, -1.5707963267949, 1.5707963267949)), ('U3', 7, None, (0.56084554, -1.5707963267949, 1.5707963267949)), ('U3', 8, None, (0.56084554, -1.5707963267949, 1.5707963267949)), ('MEASURE', 0, 0, None), ('MEASURE', 1, 1, None), ('MEASURE', 2, 2, None), ('MEASURE', 3, 3, None), ('MEASURE', 4, 4, None), ('MEASURE', 5, 5, None), ('MEASURE', 6, 6, None), ('MEASURE', 7, 7, None), ('MEASURE', 8, 8, None), ('MEASURE', 9, 9, None)]
    return answer

if __name__ == "__main__":
    # hamilton = Hamilton(2, 2, 1, 1, 4, 4, 10, 10)
    hamilton = Hamilton(5, 5, 3, 2, 1.0, 1.0, 10, 10)
    QUBIT_NUM = hamilton.params['M'] + hamilton.params['N']
    
    qvm = init_quantum_machine(QMachineType.CPU)
    qubits = qvm.qAlloc_many(QUBIT_NUM)
    classicbits = qvm.cAlloc_many(QUBIT_NUM)
    
    prog = generateTopologicalCircuit(qvm, qubits, hamilton)
    # prog.insert(measure_all(qubits, classicbits))
    
    # draw_qprog(prog, "text")
    circuit = generate_circuit(prog, qvm)
    print(question2())
    
    prog_info = count_prog_info(prog, [GateType.CNOT_GATE])
    num_layers = prog_info.layer_num
    num_gates = prog_info.gate_num
    num_double_gates = prog_info.double_gate_num
    num_cnot = prog_info.selected_gate_nums
    print(num_layers, num_gates, num_double_gates, num_cnot)
    
    qvm.directly_run(prog)
    prob_result = qvm.prob_run_dict(prog, qubits, -1)
    draw_probability(prob_result)

    result: dict[str : int] = qvm.quick_measure(qubits, 10000)
    # for str in list(result.keys()):
    #     count = 0
    #     for char in str[0 : 5]:
    #         if (char == '1'): count = count + 1
    #     if (count != 3):
    #         del result[str]
    #         continue
    #     for char in str[5 : 10]:
    #         if (char == '1'): count = count + 1
    #     if (count != 5): del result[str]
    tresult = hamilton.values(result.keys())

    # print(result)

    # plt.bar(np.arange(0, len(result), 1), result.values())
    # plt.xticks(rotation = 90, labels = result.keys(), ticks = np.arange(0, len(result)))
    # plt.show()

    # plt.bar(np.arange(0, len(tresult), 1), tresult.values())
    # plt.xticks(rotation = 90, labels = tresult.keys(), ticks = np.arange(0, len(tresult)))
    # plt.show()